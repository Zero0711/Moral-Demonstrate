let badWordCount = 0;
let banned = false;
let commentIdCounter = 4;
let recentComments = [];
let reportedComments = [];
let lastCommentTime = 0;
let guidelinesAcknowledged = false;

function normalizeText(text) {
    return text.toLowerCase()
               .replace(/[^a-z0-9]/g, '') // Remove special characters
               .replace(/4/g, 'a')
               .replace(/@/g, 'a')
               .replace(/3/g, 'e')
               .replace(/1/g, 'i')
               .replace(/0/g, 'o')
               .replace(/\$/g, 's');
}

function handleKeyPress(event) {
    if (event.key === "Enter") {
        event.preventDefault();
        submitComment();
    }
}

function submitComment() {
    if (!guidelinesAcknowledged) {
        showModal();
        return;
    }

    const now = Date.now();
    if (now - lastCommentTime < 5000) { // 5-second cooldown
        alert('You are commenting too quickly. Please wait a moment.');
        return;
    }
    lastCommentTime = now;

    if (banned) {
        document.getElementById('ban-message').classList.remove('hidden');
        return;
    }

    const commentInput = document.getElementById('comment-input');
    let commentText = commentInput.value.trim();

    if (commentText.length < 2) { // Allow very short comments
        return;
    }

    if (commentText === "/help") {
        showHelpModal();
        commentInput.value = '';
        return;
    }

    const cooldownMessage = document.getElementById('cooldown-message');

    if (!cooldownMessage.classList.contains('hidden')) {
        return;
    }

    const normalizedText = normalizeText(commentText);

    recentComments.push(normalizedText);
    if (recentComments.length > 10) {
        recentComments.shift();
    }

    if (containsBadWords(normalizedText) || checkRecentComments()) {
        badWordCount++;
        if (badWordCount >= 3) {
            banUser();
        } else {
            startCooldown();
        }
        commentInput.value = '';
        return;
    }

    addComment("You", commentText, new Date().toLocaleTimeString(), commentIdCounter++);
    commentInput.value = '';
    scrollToBottom();
}

function containsBadWords(text) {
    return badWords.some(word => text.includes(word));
}

function checkRecentComments() {
    const combinedText = recentComments.join('');
    return containsBadWords(combinedText);
}

function removeComments() {
    const commentsDiv = document.getElementById('comments');
    const comments = commentsDiv.getElementsByClassName('comment');
    const commentIdsToRemove = [];

    for (let comment of comments) {
        const commentText = normalizeText(comment.querySelector('.comment-text').textContent);
        if (containsBadWords(commentText)) {
            commentIdsToRemove.push(comment.getAttribute('data-id'));
        }
    }

    for (let id of commentIdsToRemove) {
        const commentToRemove = commentsDiv.querySelector(`.comment[data-id="${id}"]`);
        if (commentToRemove) {
            commentToRemove.remove();
        }
    }
}

function addComment(username, text, timestamp, id) {
    const commentsDiv = document.getElementById('comments');
    const newComment = document.createElement('div');
    newComment.classList.add('comment');
    newComment.setAttribute('data-id', id);
    newComment.innerHTML = `
        <img src="avatar.png" alt="User Avatar" class="avatar">
        <div class="comment-content">
            <div class="comment-header">
                <span class="comment-username">${username}</span>
                <span class="comment-timestamp">${timestamp}</span>
            </div>
            <div class="comment-text">${text}</div>
            <div class="comment-actions">
                <button class="like-button" onclick="likeComment(this)">Like <span class="like-count">0</span></button>
                ${username === "You" ? '<button class="edit-button" onclick="editComment(this)">Edit</button>' : ''}
                <button class="report-button" onclick="reportComment(this)">Report</button>
            </div>
        </div>
    `;
    commentsDiv.appendChild(newComment);
}

function startCooldown() {
    const cooldownMessage = document.getElementById('cooldown-message');
    cooldownMessage.classList.remove('hidden');

    setTimeout(() => {
        cooldownMessage.classList.add('hidden');
    }, 5000);
}

function banUser() {
    banned = true;
    document.getElementById('comment-input').disabled = true;
    document.querySelector('.comment-form button').disabled = true;
    document.getElementById('ban-message').classList.remove('hidden');
}

function likeComment(button) {
    const likeCountSpan = button.querySelector('.like-count');
    let likeCount = parseInt(likeCountSpan.textContent);
    likeCount++;
    likeCountSpan.textContent = likeCount;
}

function reportComment(button) {
    const commentDiv = button.closest('.comment');
    const commentId = commentDiv.getAttribute('data-id');
    if (!reportedComments.includes(commentId)) {
        reportedComments.push(commentId);
        commentDiv.classList.add('reported');
        alert('Comment reported. Thank you for your feedback.');
    } else {
        alert('This comment has already been reported.');
    }
}

function editComment(button) {
    const commentDiv = button.closest('.comment');
    const commentTextDiv = commentDiv.querySelector('.comment-text');
    const originalText = commentTextDiv.textContent;

    const editInput = document.createElement('textarea');
    editInput.className = 'edit-input';
    editInput.value = originalText;
    editInput.onkeypress = handleKeyPress;
    commentTextDiv.replaceWith(editInput);

    button.textContent = 'Save';
    button.onclick = () => saveEditedComment(editInput);
}

function saveEditedComment(editInput) {
    const newText = editInput.value.trim();
    const commentDiv = editInput.closest('.comment');

    if (newText === '') {
        return;
    }

    const normalizedText = normalizeText(newText);
    if (containsBadWords(normalizedText)) {
        startCooldown();
        commentDiv.remove();
        return;
    }

    const commentTextDiv = document.createElement('div');
    commentTextDiv.className = 'comment-text';
    commentTextDiv.textContent = newText.charAt(0).toUpperCase() + newText.slice(1);
    editInput.replaceWith(commentTextDiv);

    const editButton = commentDiv.querySelector('.edit-button');
    editButton.textContent = 'Edit';
    editButton.onclick = () => editComment(editButton);
}

function scrollToBottom() {
    const commentsDiv = document.getElementById('comments');
    commentsDiv.scrollTop = commentsDiv.scrollHeight;
}

// Modal functions
function showModal() {
    document.getElementById('guidelines-modal').style.display = "block";
}

function closeModal() {
    document.getElementById('guidelines-modal').style.display = "none";
}

function acknowledgeGuidelines() {
    guidelinesAcknowledged = true;
    closeModal();
}

// Help modal functions
function showHelpModal() {
    document.getElementById('help-modal').style.display = "block";
}

function closeHelpModal() {
    document.getElementById('help-modal').style.display = "none";
}

// Show the modal when the page loads
window.onload = showModal;
